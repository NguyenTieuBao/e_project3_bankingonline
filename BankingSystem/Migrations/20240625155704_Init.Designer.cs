// <auto-generated />
using System;
using BankingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankingSystem.Migrations
{
    [DbContext(typeof(EBankingonlineContext))]
    [Migration("20240625155704_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankingSystem.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(15, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Locked")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AccountNumber" }, "UQ_AccountNumber")
                        .IsUnique();

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AdminId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "UQ_Username")
                        .IsUnique();

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Adminprofile", b =>
                {
                    b.Property<int>("AdminProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminProfileId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("AdminProfileId");

                    b.HasIndex("AdminId");

                    b.ToTable("adminprofile", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Adminrole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "RoleName" }, "UQ_RoleName")
                        .IsUnique();

                    b.ToTable("adminroles", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Otp", b =>
                {
                    b.Property<int>("Otpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OTPId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Otpid"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Otpcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OTPCode");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Otpid");

                    b.HasIndex("UserId");

                    b.ToTable("otp", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RequestType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("requests", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Tokenblacklist", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("TokenId");

                    b.ToTable("tokenblacklist", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<DateTime?>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Transfertransaction", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<int?>("FromAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ToAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransferId");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.ToTable("transfertransactions", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool?>("AccountLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("PasswordResetExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "UQ_Username_New")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("UserId")
                        .HasName("PK__UserToke__1788CC4C5A0172AC");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BankingSystem.Models.Userprofile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("userprofile", (string)null);
                });

            modelBuilder.Entity("BankingSystem.Models.Account", b =>
                {
                    b.HasOne("BankingSystem.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_accounts_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.Models.Admin", b =>
                {
                    b.HasOne("BankingSystem.Models.Adminrole", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__admins__RoleId__3F466844");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BankingSystem.Models.Adminprofile", b =>
                {
                    b.HasOne("BankingSystem.Models.Admin", "Admin")
                        .WithMany("Adminprofiles")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK__adminprof__Admin__4222D4EF");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("BankingSystem.Models.Otp", b =>
                {
                    b.HasOne("BankingSystem.Models.User", "User")
                        .WithMany("Otps")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__otp__UserId__52593CB8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.Models.Request", b =>
                {
                    b.HasOne("BankingSystem.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__requests__UserId__5629CD9C");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.Models.Transaction", b =>
                {
                    b.HasOne("BankingSystem.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__transacti__Accou__60A75C0F");

                    b.HasOne("BankingSystem.Models.Admin", "Admin")
                        .WithMany("Transactions")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK__transacti__Admin__5EBF139D");

                    b.HasOne("BankingSystem.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__transacti__UserI__5FB337D6");

                    b.Navigation("Account");

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.Models.Transfertransaction", b =>
                {
                    b.HasOne("BankingSystem.Models.Account", "FromAccount")
                        .WithMany("TransfertransactionFromAccounts")
                        .HasForeignKey("FromAccountId")
                        .HasConstraintName("FK__transfert__FromA__6477ECF3");

                    b.HasOne("BankingSystem.Models.Account", "ToAccount")
                        .WithMany("TransfertransactionToAccounts")
                        .HasForeignKey("ToAccountId")
                        .HasConstraintName("FK__transfert__ToAcc__656C112C");

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("BankingSystem.Models.User", b =>
                {
                    b.HasOne("BankingSystem.Models.Adminrole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BankingSystem.Models.UserToken", b =>
                {
                    b.HasOne("BankingSystem.Models.User", "User")
                        .WithOne("UserToken")
                        .HasForeignKey("BankingSystem.Models.UserToken", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserToken__UserI__5AEE82B9");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.Models.Userprofile", b =>
                {
                    b.HasOne("BankingSystem.Models.User", "User")
                        .WithMany("Userprofiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__userprofi__UserI__4F7CD00D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem.Models.Account", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("TransfertransactionFromAccounts");

                    b.Navigation("TransfertransactionToAccounts");
                });

            modelBuilder.Entity("BankingSystem.Models.Admin", b =>
                {
                    b.Navigation("Adminprofiles");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BankingSystem.Models.Adminrole", b =>
                {
                    b.Navigation("Admins");
                });

            modelBuilder.Entity("BankingSystem.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Otps");

                    b.Navigation("Requests");

                    b.Navigation("Transactions");

                    b.Navigation("UserToken");

                    b.Navigation("Userprofiles");
                });
#pragma warning restore 612, 618
        }
    }
}
